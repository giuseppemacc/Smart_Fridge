#include "file_names.h"
#include "types.h"
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// ritorna 1 str1 == str2
int strEqual(char *str1, char *str2) {
  int flag_equal;
  if (strcmp(str1, str2) == 0) {
    flag_equal = 1;
  } else {
    flag_equal = 0;
  }
  return flag_equal;
}

// ritorna 1 se str1 < str2 (dal punto di vista alfabetico)
int strMin(char *str1, char *str2) {
  int str1_len = strlen(str1);
  int str2_len = strlen(str2);
  int str_min = (str1_len <= str2_len) ? str1_len : str2_len;

  int i = 0;
  int flag_min = -1;

  while (i < str_min && (flag_min == -1)) {
    // printf("str1:%c  str2:%c\n", str1[i], str2[i]);
    if (str1[i] > str2[i]) {
      flag_min = 0;
    } else if (str1[i] < str2[i]) {
      flag_min = 1;
    }
    i++;
  }
  // flag_min == 0 ==> str1>str2
  // flag_min == 1 ==> str1<str2
  // flag_min ==-1 ==> str1==str2 (per i primi str_min caratteri)

  // se sottostringa uguale e str1_len > str2_len  ==> 0
  // se sottostringa uguale e str1_len == str2_len  ==> 0
  if (flag_min == -1) {
    if (str1_len > str2_len) {
      flag_min = 0;

    } else if (str1_len == str2_len) {
      flag_min = 0;
    } else {
      flag_min = 1;
    }
  }

  return flag_min;
}

// ??TODO?? apri il file se non � gi� aperto
int apriFile(FILE **file, char *file_name, char *mode) {
  int flag_open = 0;

  *file = fopen(file_name, mode);

  if ((*file) == NULL) {
    puts("file non trovato");
  } else {
    puts("."); // TODO: da togliere poi serve solo per capire che e andato tutto
               // bene
    flag_open = 1;
  }
  return flag_open;
}

void clearFile(char *file_name) {
  // ------ resetta il file ---------------
  FILE *f;
  if (apriFile(&f, file_name, "wb+")) {
    printf("%s pulito\n", file_name);
    fclose(f);
  }
}


// TODO: capire come funziona perche ho copiato e incollato
void strToUpper(char *str) {
  char *name;
  name = strtok(str, ":");

  // Convert to upper case
  char *s = name;
  while (*s) {
    *s = toupper((unsigned char)*s);
    s++;
  }
}



/*RESTITUISCE:  1 = LUNGHEZZA str > L_MAX
                0 = LUNGHEZZA str < L_MAX*/
/*int checkLenght(char *str, int L_MAX) {
  int flag = 0;

  if (strlen(str) > L_MAX){
    printf("\tERRORE! La quantit� deve essere maggiore o uguale a 0\n");
    flag = 1;
  }

  return flag;
}



/*RESTITUISCE:  1 = quantita < 0
                0 = quantita > 0*/
/*int checkQuantita(int quantita) {
  int flag = 0;

  if (quantita <= 0){
    flag = 1;
    printf("ERRORE! La quantit� deve essere maggiore o uguale a 0\n");
  }

  return flag;
}
*/





/*
int checkFloat(float quantita_float){
  int quantita_int;
  int flag_errore=0;

  quantita_int=(int)quantita_float;      //viene fatto il cast(int), quindi se quantita_float=2.30, quantita_int=2

  if(quantita_float>quantita_int){
    printf("\tERRORE! Le unit� di misura g  ml  n_elementi non possono avere numeri decimali\n");
    flag_errore=1;
  }


  return flag_errore;
}
*/


int checkExit(char *str) {
  int flag = 0;

  if (strcmp(str, "-1") == 0)
    flag = 1;

  return flag;
}




// chiede e ritorna un numero
// se l'utente inserisci -1 imposta flag_home = 1
int inputNum(int* flag_home){

  int num;

  // non printa
  scanf("%d",&num);

  if (num==-1){
    *flag_home=-1;
  }

  return num;


  // vari controlli sull input

  // if input == -1:
  //   *flag_home = 1

}

// in input_alimenti:

// int quantita = inputNum(&flag_home)
// if( !flag_home ){
//      alimento.quantita = quantita
//      char nome = inputStr(&flag_home)
//      if ( !flag_home){
//            altro ....
//      }
// }


void checkExitString(char* string,int* flag_home){
  if(strcmp(string,"-1")==0)
  {
    *flag_home=-1;
  }
}





/*    === PATTERN PER USARE I FILE ===
 *
 * FILE* file;
 *
 * if( apriFile(&file, FILENAME_ALIMENTI, "rb+") ){
 *
 *
 * 	// .... istruzioni che operano sul file ....
 *
 *
 * 	fclose(file);
 *
 * }
 *
 * */
