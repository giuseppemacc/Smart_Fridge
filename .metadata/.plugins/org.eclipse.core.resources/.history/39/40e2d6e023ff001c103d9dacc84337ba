#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "file_names.h"
#include "gestione_alimenti.h"
#include "gestione_ricette.h"
#include "piano_settimanale.h"
#include "types.h"
#include "utils.h"
#include "check_input.h"


// ?TODO: dichiarare un nuovo tipo bool come enum {false, true}  (false=0,
// true=1)

//#ifndef HOME_VALUE
#define HOME_VALUE -1 // BACK_HOME
//#endif






void valutaRicetta(char* nome_ricetta, int* flag_home){
	int valutazione;
	int flag_errore;
	FILE* file_ricette;
	t_ricetta ricetta_trovata; // che saraà uguale a ricetta


	do{
		printf("inserisci una valutazione da 1 a 5 per [%s] >> ", nome_ricetta);
		valutazione = inputInt(&flag_errore, &(*flag_home));

		if(!(*flag_home) && !(flag_errore)){
			flag_errore = !((valutazione>=1) && (valutazione<=5));
		}

	}while(flag_errore && (*flag_home==0));

	if(!(*flag_home)){

		if(apriFile(&file_ricette, FILENAME_RICETTE, "rb+")){

			if( ricerca_ricetta(nome_ricetta, &ricetta_trovata, file_ricette) ){

				ricetta_trovata.valutazione = valutazione;

				fwrite(&ricetta_trovata, sizeof(t_ricetta), 1, file_ricette);

			}

			fclose(file_ricette);
			puts("file chiuso ao");

		}
	}
}




void preparaRicetta(t_ricetta ricetta){
	FILE* file_pianosettimanale;
	FILE* file_alimenti;
	FILE* file_ricette;
	FILE* file_cronologiaricette;

	giorni giorno;
	t_alimento alimento;
	t_ricetta ricetta_corrente;

	//aggiungi la ricetta alla cronologia

	// file giorni ++
	if (apriFile(&file_pianosettimanale, FILENAME_PIANO_SETTIMANALE, "rb+")){

		fread( &giorno, sizeof(giorni), 1, file_pianosettimanale);
		fseek(file_pianosettimanale, -sizeof(giorni), SEEK_CUR); // sposta di uno indietro

		if(giorno == DOM){
			giorno = LUN;
		}else{
			giorno++;
		}

		fwrite(&giorno, sizeof(giorni), 1, file_pianosettimanale);

		fclose(file_pianosettimanale);
	}


	// deve scalare la quantità dal frigo
	if (apriFile(&file_alimenti, FILENAME_ALIMENTI, "rb+")){

		for(int i=0; i<ricetta.n_ingredienti; i++){

			if( ricetta.ingredienti[i].dispensa == 0 ){ // se l alimento non è da dispensa
				if( ricerca_alimento(ricetta.ingredienti[i].nome, &alimento, file_alimenti  ) ){
					alimento.quantita -= ricetta.ingredienti[i].quantita;

					if(alimento.quantita<=0){
						strcpy(alimento.nome,""); // se la quantita==0 elimina l'alimento dal frigo
					}

					fwrite(&alimento, sizeof(t_alimento), 1, file_alimenti);
				}else{
					printf("GRAAAAAAAANDE BUUUUUG\n");
				}
			}

		}

		fclose(file_alimenti);
	}


	// counter_giorni = 0
	// preparata = true

	// per ogni ricetta eccetto quella preparata:

	//	counter_giorni++
	//  if (prepara==true) AND (counter_giorni > 7):
	//		preparata = false

	if( apriFile( &file_ricette, FILENAME_RICETTE, "rb+") ){

		t_ricetta ric_corrente;
		int i=0;

		rewind(file_ricette);
		fread(&ric_corrente, sizeof(t_ricetta), 1, file_ricette);

		while( !(feof(file_ricette)) ){


			ric_corrente.counter_giorni += 1;
			//print_ricetta(ric_corrente);
			fseek(file_ricette, -sizeof(t_ricetta), SEEK_CUR);
			fwrite(&ric_corrente, sizeof(t_ricetta), 1, file_ricette);
			i++;



			fseek(file_ricette, i*sizeof(t_ricetta), SEEK_SET);
			fread(&ric_corrente, sizeof(t_ricetta), 1, file_ricette);
		}


		if(ricerca_ricetta(ricetta.nome, &ricetta_corrente, file_ricette)){

			ricetta_corrente.counter_giorni = 0;
			ricetta_corrente.preparata = 1;
			fwrite(&ricetta_corrente, sizeof(t_ricetta), 1, file_ricette);

		}else{
			printf("ANCORA PIU GRAAAAAAAANDE BUUUUUG\n");
		}


		fclose(file_ricette);
	}





	// aggiugni ricetta alla cronologia ricette
	if( apriFile(&file_cronologiaricette, FILENAME_CRONOLOGIA_RICETTE, "rb+")){
		fseek( file_cronologiaricette, 0, SEEK_END ); // posiziona alla fine

		fwrite(&ricetta, sizeof(t_ricetta), 1, file_cronologiaricette);

		fclose(file_cronologiaricette);

	}

}



t_ricetta richiediRicetta(int* flag_home){

	t_ricetta ricetta_trovata;
	t_ricetta ricette_trovate[50];
	int n_ricette_trovate;

	int flag_continue;
	int flag_errore;

	char nome[20];
	int input;

	FILE* file_ricette;

	*flag_home = 0;
	do{
		flag_continue = 0;

		do{
			printf("Inserisci il nome della ricetta >> ");
			inputStr(nome, 20, &flag_errore, &(*flag_home));

		}while(flag_errore && ((*flag_home)==0));


		if(!(*flag_home)){

			if(apriFile(&file_ricette, FILENAME_RICETTE, "rb+")){

				if( !ricerca_ricetta(nome, &ricetta_trovata, file_ricette) ){

					ricerca_ricettaSottstr(nome, ricette_trovate, &n_ricette_trovate, file_ricette);

					if( n_ricette_trovate > 0){
						// printa gli alimenti

						puts("forse cercavi ...");

						for( int i = 0; i < n_ricette_trovate; i++){
							printf("%d) %s\n", i+1, ricette_trovate[i].nome );
						}
						printf("0) cerca un'altra ricetta\n");

						do{
							printf("seleziona opzione >> ");
							input = inputInt(&flag_errore, &(*flag_home));

							if(!(*flag_home) && !flag_errore){

								if( input == 0 ){
									flag_continue = 1;
								}else if ( input > n_ricette_trovate ){
									flag_errore = 1;
								}else{
									ricetta_trovata = ricette_trovate[input-1];
								}
							}

						}while(flag_errore && ((*flag_home)==0));


					}else{
						printf("ricetta non trovata\n");
						flag_continue = 1;
					}

				}

				fclose(file_ricette);
			}
		}

	}while(flag_continue && ((*flag_home)==0) );

	return ricetta_trovata;
}



t_alimento richiediAlimento(int* flag_home){

	t_alimento alimento_trovato;
	t_alimento alimenti_trovati[50];
	int n_alimenti_trovati;

	int flag_continue;
	int flag_errore;

	char nome[20];
	int input;

	FILE* file_alimenti;

	*flag_home = 0;
	do{
		flag_continue = 0;

		do{
			printf("Inserisci il nome dell'alimento >> ");
			inputStr(nome, 20, &flag_errore, &(*flag_home));

		}while(flag_errore && ((*flag_home)==0));



		if(!(*flag_home)){

			if(apriFile(&file_alimenti, FILENAME_ALIMENTI, "rb+")){

				if( !ricerca_alimento(nome, &alimento_trovato, file_alimenti) ){

					ricerca_alimentoSottstr(nome, alimenti_trovati, &n_alimenti_trovati, file_alimenti);

					if( n_alimenti_trovati > 0){
						// printa gli alimenti

						puts("forse cercavi ...");

						for( int i = 0; i < n_alimenti_trovati; i++){
							printf("%d) %s\n", i+1, alimenti_trovati[i].nome );
						}
						printf("0) cerca un altro alimento\n");

						do{
							printf("seleziona opzione >> ");
							input = inputInt(&flag_errore, &(*flag_home));

							if(!(*flag_home) && !flag_errore){

								if( input == 0 ){
									flag_continue = 1;
								}else if ( input > n_alimenti_trovati ){
									flag_errore = 1;
								}else{
									alimento_trovato = alimenti_trovati[input-1];
								}
							}

						}while(flag_errore && ((*flag_home)==0));


					}else{
						printf("alimento non trovato\n");
						flag_continue = 1;
					}

				}

				fclose(file_alimenti);
			}
		}

	}while(flag_continue && ((*flag_home)==0) );

	return alimento_trovato;
}



void menu_modificaAlimento(){
	int flag_home;
	t_alimento alimento;
	t_alimento alimento_modificato;

	alimento = richiediAlimento(&flag_home);

	if(!flag_home){

		alimento_modificato = modificaAlimento(alimento, &flag_home);

		if(!flag_home){
			sovrascrivi_alimento(alimento.nome, alimento_modificato);
		}
	}
}


void menu_modificaRicetta(){
	int flag_home;
	t_ricetta ricetta;
	t_ricetta ricetta_modificata;

	ricetta = richiediRicetta(&flag_home);

	if(!flag_home){

		ricetta_modificata = modificaRicetta(ricetta, &flag_home);

		if(!flag_home){
			sovrascrivi_ricetta(ricetta.nome, ricetta_modificata);
		}
	}
}


void printRic_Preparabili(){
	t_ricetta ricette_preparabili[50]; // deve essere il numero di ricette presenti
	int n_ricette_preparabili;

	ricettePreparabili(ricette_preparabili, &n_ricette_preparabili,FILENAME_RICETTE);
	if(n_ricette_preparabili>0){
		print_arr_ricette(ricette_preparabili, n_ricette_preparabili);
	}else{
		puts("Nessuna ricetta preparabile :(");
	}

}


void fattiConsigliare(){
	int input;
	int input_ins_al;
	int input_valutazione;
	int flag_errore;
	int flag_home;
	int flag_continue;

	t_alimento alimenti_scelti[50];
	int n_alimenti_scelti;

	t_ricetta ricette_selezionate[50];
	int n_ricette_selezionate;

	do{
		printf("vuoi mangiare qualche alimento in particolare? ");
		input_ins_al = inputBool(&flag_errore, &flag_home);
	}while( flag_errore && (flag_home==0)  );

	if( !flag_home ){

		do{
			n_alimenti_scelti = 0;
			n_ricette_selezionate = 0;

			if(input_ins_al){ // se è stato detto di inserire gli alimenti

				do{
					alimenti_scelti[n_alimenti_scelti] = richiediAlimento(&flag_home);
					if (!flag_home){
						n_alimenti_scelti++;
						do{
							printf("sceliere un altro alimento? ");
							input = inputBool(&flag_errore, &flag_home);
						}while(flag_errore && (flag_home==0));
					}

				}while(input && (flag_home==0));

				if(!flag_home){
					ricetteCompatibili(alimenti_scelti, n_alimenti_scelti, ricette_selezionate, &n_ricette_selezionate, FILENAME_RICETTE);

				}

			}else{ // se non è stato detto di inserire gli alimenti
				ricettePreparabili(ricette_selezionate, &n_ricette_selezionate, FILENAME_RICETTE);
			}

			if(!flag_home){

				prioritarizza_ricette(ricette_selezionate, n_ricette_selezionate);

				if( n_ricette_selezionate > 0){ // se sono state trovate ricette possibili

					input = 0;
					int i = 0;

					while( (i<n_ricette_selezionate) && (flag_home == 0) && (input==0) ){

						print_ricetta( ricette_selezionate[i] );

						do{
							printf("prepare questa ricetta? ");
							input = inputBool(&flag_errore, &flag_home);
						}while(flag_errore && (flag_home==0));

						if(!flag_home){
							if(input){ // se è stato detto di preparare la ricetta
								// prepara ricetta
								puts("ricetta preparata\n\n");
								flag_continue = 0;
								preparaRicetta( ricette_selezionate[i]  );
								do{
									printf("vuoi aggiungere una valutazione per la ricetta? ");
									input_valutazione = inputBool(&flag_errore, &flag_home);
								}while(flag_errore && (flag_home==0));

								if(!flag_home){

									if(input_valutazione){
										valutaRicetta(ricette_selezionate[i].nome, &flag_home);
									}

								}

							}else{
								if(i == (n_ricette_selezionate-1)){
									printf("non sono presenti altre ricette preparabili\n");

									if(input_ins_al){
										do{
											printf("cambiare gli alimenti? ");
											flag_continue = inputBool(&flag_errore, &flag_home);
										}while(flag_errore && (flag_home==0));
									}else{
										flag_continue = 0;
									}

								}
								i++;
							}
						}
					}
				}else{ // se non sono state trovate ricette possibili
					if(input_ins_al){
						printf("nessuna ricetta preparabile con gli alimenti scelti!\n");
						do{
							printf("cambiare gli alimenti ?");
							flag_continue = inputBool(&flag_errore, &flag_home);
						}while(flag_errore && (flag_home==0));

					}else{
						printf("nessuna ricetta è preparabile con gli alimenti presenti in frigo\n");
						flag_continue = 0;
					}
				}
			}
		}while( flag_continue && (flag_home==0) );

	}
}







void menu() {
  char opzioni[] = "1) visualizza alimenti\n"
		           "2) carica alimenti\n"
		           "3) visualizza ricette\n"
		           "4) carica ricette\n"
		  	  	   "5) resetta file alimenti\n"
		  	  	   "6) resetta file ricette\n"
		  	  	   "7) visualizza ricette preparabili\n"
		  	  	   "8) ricerca alimento\n"
		  	  	   "9) ricerca ricetta\n"
		  	  	   "10) visualizza cronologia pasti\n"
		  	  	   "11) visualizza statistica valutazioni ricette\n"
		  	  	   "12) fatti consigliare\n"
		  	  	   "13) prepara ricetta\n"
		  	  	   "14) visualizza piano settimanale\n"

		  	  	   "15) modifica/elimina ricetta\n"
		  	  	   "16) modifica/elimina alimento\n"
		  	  	   "17) modifica piano settimanale\n"
		  	  	   "18) valuta una ricetta\n"
		  	  	   "0) uscire\n";

  int input;
  int flag_continue; // sarebbe il flag_home
  int flag_errore;

  do {
    flag_continue = 1;
    flag_errore = 0;

    printf("Oggi e': %s\n", returnGiorno( get_giorno_attuale()) );
    printf("\n\n%s\n\t>> ", opzioni);
    input = inputInt(&flag_errore, &flag_continue); // se viene inserito HOME_VAL
                                      // flag_continue=true e flag_errore=false

    if (!flag_errore && !flag_continue) { // se non sono avvenuti errori e non �
                                          // inserito HOME_VAL
      flag_continue = 1;

      if (input == 0) {
    	 puts("exit ... ");
        flag_continue = 0;

      } else if (input == 1) {
    	print_alimenti(FILENAME_ALIMENTI);

      } else if (input == 2) {
    	  caricaAlimenti();

      } else if (input == 3) {
    	  print_ricette(FILENAME_RICETTE);

      }else if (input == 4) {
    	  caricaRicette();

      }else if (input == 5) {
    	  clearFile(FILENAME_ALIMENTI);

      }else if (input == 6) {
    	  clearFile(FILENAME_RICETTE);

      }else if (input == 7) {
    	  printRic_Preparabili();

      }else if (input == 8) {
    	  t_alimento alimento = richiediAlimento(&flag_continue);

    	  if(!flag_continue){
    		  print_alimento(alimento);
    		  flag_continue = 1;
    	  }
      }else if (input == 9) {
    	  t_ricetta ricetta = richiediRicetta(&flag_continue);

		  if(!flag_continue){
			  print_ricetta(ricetta);
			  flag_continue = 1;
		  }

      }else if (input == 10) {
    	  print_ricette(FILENAME_CRONOLOGIA_RICETTE);

      }else if (input == 11) {
    	  printStatistica_voti();

      }else if (input == 12) {
    	  fattiConsigliare();

      }else if (input == 13) {
    	  t_ricetta ricetta = richiediRicetta(&flag_continue);
    	  if(!flag_continue  && isPreparabile(ricetta, FILENAME_ALIMENTI) ){
    		  preparaRicetta(ricetta);
    		  flag_continue = 1;
    	  }

      }else if (input == 14) {
    	  print_piano_settimanale();

      }else if (input == 15) {
    	  menu_modificaRicetta();

      }else if (input == 16) {
    	  menu_modificaAlimento();

      }else if (input == 17) {
    	  modificaPiano_settimanale();

      }else if (input == 18) {

    	  printf("Valuta una ricetta:\n\t");
    	  t_ricetta ricetta_da_valutare = richiediRicetta(&flag_continue);

    	  if(!flag_continue){
    		  valutaRicetta(ricetta_da_valutare.nome, &flag_continue);

    		  flag_continue = 1;
    	  }


      }else {
        flag_errore = 1;
      }
    }

    if (flag_errore) {
    	flag_continue = 1;
      puts("comando non trovato");
    }

  } while (flag_continue);
}

// --------------------------------------------------------------------------------------------




/*

"5) resetta file alimenti\n"
"6) resetta file ricette\n"


"10) visualizza cronologia pasti\n"
"11) visualizza statistica valutazioni ricette\n"
"14) visualizza piano settimanale\n"

"17) modifica piano settimanale\n"
"0) uscire\n";

*/

void menuu(){


	char opzioni_menu[][200] = {
			"[1] visualizza gli alimenti del frigo\n[2] aggiungi alimenti in frigo\n[3] cerca alimento nel frigo\n[4] modifica/rimuovi alimento dal frigo\n-------- FRIGO (1/4) --------\n",
			"[1] visualizza ricettario\n[2] aggiungi ricetta al ricettario\n[3] cerca ricetta nel ricettario\n[4] modifica/rimuovi ricetta dal ricettario\n[5] valuta una ricetta\n[5] visualizza statistica valutazione ricette\n",
			"[1] visualizza ricette preparabili\n[2] prepara ricetta\n[3] fatti consigliare cosa prepare!\n[4] modifica/rimuovi alimento dal frigo\n",
			"4/4\n"
	};


	int menu_selezionato = 1;
	int flag_continue = 1;
	int flag_errore;
	int flag_home;

	char input[20];


	do{
		printf("%s", opzioni_menu[menu_selezionato]);
		printf("\n\t\t\tV\n");
		printf("\t\t\t");

		inputStr(input, 20, &flag_errore, &flag_home);

		if(!flag_errore && !flag_home){
			if( strEqual(input, "exit") ){
				flag_continue = 0;

			}if( strEqual(input, ">") ){

				if(menu_selezionato < 3 ){
					menu_selezionato++;
				}

			}if( strEqual(input, "<") ){

				if(menu_selezionato > 0 ){
					menu_selezionato--;
				}

			}else{

				if( menu_selezionato == 0 ){

					if(strEqual(input, "1")){

						print_alimenti(FILENAME_ALIMENTI);

					}else if(strEqual(input, "2")){

					}

				}else if( menu_selezionato == 1 ){



				}else if( menu_selezionato == 2 ){



				}else if( menu_selezionato == 3 ){



				}

			}
		}

	}while(flag_continue || flag_errore || flag_home);


}
























