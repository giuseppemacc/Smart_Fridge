#include "file_names.h"
#include "types.h"
#include <ctype.h>
#include <stdio.h>
#include <string.h>


// ritorna 1 str1 == str2
int strEqual(char *str1, char *str2) {
  int flag_equal;
  if (strcmp(str1, str2) == 0) {
    flag_equal = 1;
  } else {
    flag_equal = 0;
  }
  return flag_equal;
}

// ritorna 1 se str1 <= str2 (dal punto di vista alfabetico)
int strMin(char *str1, char *str2) {
  int str1_len = strlen(str1);
  int str2_len = strlen(str2);
  int str_min = (str1_len <= str2_len) ? str1_len : str2_len;

  int i = 0;
  int flag_min = -1;

  while (i < str_min && (flag_min == -1)) {
    printf("str1:%c  str2:%c\n", str1[i], str2[i]);
    if (str1[i] > str2[i]) {
      flag_min = 0;
    } else if (str1[i] < str2[i]) {
      flag_min = 1;
    }
    i++;
  }
  // flag_min == 0 ==> str1>str2
  // flag_min == 1 ==> str1<str2
  // flag_min ==-1 ==> str1==str2 (per i primi str_min caratteri)

  // se sottostringa uguale e str1_len > str2_len  ==> 0
  if (flag_min == -1) {
    if (str1_len > str2_len) {
      flag_min = 0;
    } else {
      flag_min = 1;
    }
  }

  return flag_min;
}

// ??TODO?? apri il file se non è già aperto
int apriFile(FILE **file, char *file_name, char *mode) {
  int flag_open = 0;

  *file = fopen(file_name, mode);

  if ((*file) == NULL) {
    puts("file non trovato");
  } else {
    puts("."); // TODO: da togliere poi serve solo per capire che e andato tutto
               // bene
    flag_open = 1;
  }
  return flag_open;
}





void ordinaFileAlimenti_AZ(char *file_name){
  FILE *file;
  t_alimento alimento_corrente;
  t_alimento temp_alimento;
  t_alimento alimento_min;
  int i=0;
  int i_min;
  int j;
  if( apriFile(&file, file_name, "rb+") ){
    rewind(file);

    fread(&alimento_min, sizeof(t_alimento), 1, file);
    temp_alimento = alimento_min;
    while (!feof(file)) {

      j=i;
      i_min=j;
      fread(&alimento_corrente, sizeof(t_alimento), 1, file);
      while (!feof(file)) {

        //------
        if(  strMin(alimento_corrente.nome, alimento_min.nome)   ){
          alimento_min = alimento_corrente;
          i_min = j;
        }
        j++;
        //-----

        fread(&alimento_corrente, sizeof(t_alimento), 1, file);
      }

      // file[j] = temp_alimento
      fseek(file, i_min * sizeof(t_alimento), SEEK_SET);
      fwrite(&temp_alimento, sizeof(t_alimento), 1, file);

      // file[i] = alimento_min
      fseek(file, i * sizeof(t_alimento), SEEK_SET);
      fwrite(&alimento_min, sizeof(t_alimento), 1, file);
      fseek(file, -sizeof(t_alimento), SEEK_CUR);
      i++;
      //----

      fread(&alimento_min, sizeof(t_alimento), 1, file);
      temp_alimento = alimento_min;
    }

    fclose(file);
  }

}

void ordinaFileRicette_AZ(char *file_name){

}


// TODO: capire come funziona perche ho copiato e incollato
void strToUpper(char *str) {
  char *name;
  name = strtok(str, ":");

  // Convert to upper case
  char *s = name;
  while (*s) {
    *s = toupper((unsigned char)*s);
    s++;
  }
}

/*    === PATTERN PER USARE I FILE ===
 *
 * FILE* file;
 *
 * if( apriFile(&file, FILENAME_ALIMENTI, "rb+") ){
 *
 *
 * 	// .... istruzioni che operano sul file ....
 *
 *
 * 	fclose(file);
 *
 * }
 *
 * */

// NULL == 0

//	FILE* file;
//	apriFile(&file, FILENAME_ALIMENTI, "rb+");
//	//file = fopen(FILENAME_ALIMENTI,"rb+");
//
//		t_alimento alimento;
//		//fseek(file, sizeof(t_alimento), SEEK_SET);
//		fread( &alimento, sizeof(t_alimento), 1, file);
//		puts("----");
//		print_alimento(alimento);
//		alimento.quantita += 100;
//		puts("----");
//		fseek(file, -1*sizeof(t_alimento), SEEK_CUR); // sposta di uno
// indietro 		fwrite( &alimento, sizeof(t_alimento), 1, file);
//
//
//	fclose(file);

// fseek(file_alimenti, 0, SEEK_END); // posiziona alla fine
