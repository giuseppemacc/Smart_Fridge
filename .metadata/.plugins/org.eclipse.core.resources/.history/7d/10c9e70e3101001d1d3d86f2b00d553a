#include "file_names.h"
#include "types.h"
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>



/**
 * @fn int strEqual(char*, char*)
 * @brief determina se str1 == str2
 * @param str1
 * @param str2
 * @return 1 se str1 == str2, altrimenti 0
 */
int strEqual(char *str1, char *str2) {
  int flag_equal;
  if (strcmp(str1, str2) == 0) {
    flag_equal = 1;
  } else {
    flag_equal = 0;
  }
  return flag_equal;
}

/**
 * @fn int sottostrEqual(char*, char*)
 * @brief determina se str1 è una sottostringa di str2
 * @param str1
 * @param str2
 * @return 1 se str1 è una sottostringa di str2, 0 altrimenti
 */
int sottostrEqual(char * str1, char* str2){

	int flag_equal;

	flag_equal = 0;

	char* str = strstr(str1,str2);

	if( str != NULL){
		flag_equal = 1;
	}

	return flag_equal;
}

/**
 * @fn int strMin(char*, char*)
 * @brief determina se str1 viene prima di str2 in ordine alfabetico
 * @param str1
 * @param str2
 * @return 1 se str1 viene prima di str2 in ordine alfabetico, altrimenti 0 (anche quando sono uguali)
 */
int strMin(char *str1, char *str2) {
	int flag_min;

	if( strcmp(str1, str2)<0 ){
		flag_min = 1;
	}else{
		flag_min = 0;
	}

	return flag_min;
}


/**
 * @fn int apriFile(FILE**, char*, char*)
 * @brief apre il file
 * @pre file chiuso
 * @post file aperto
 * @param file
 * @param file_name è il percorso del file da aprire
 * @param mode la modalità con cui aprire il file
 * @return 1 se il file è stato aperto senza errori, 0 se sono avvenuti errori
 */
int apriFile(FILE **file, char *file_name, char *mode) {
  int flag_open = 0;

  *file = fopen(file_name, mode);

  if ((*file) == NULL) {
    puts("file non trovato");
  } else {

    flag_open = 1;
  }
  return flag_open;
}


/**
 * @fn void clearFile(char*)
 * @brief pulisce il file
 * @post file pulito
 * @param file_name
 */
void clearFile(char *file_name) {
  FILE *f;
  if (apriFile(&f, file_name, "wb+")) {
    printf("%s pulito\n", file_name);
    fclose(f);
  }
}


/**
 * @fn void strToUpper(char*)
 * @brief converte in maiuscolo tutti i caratteri della stringa
 * @pre stringa con caratteri minuscoli/maiuscoli
 * @post stringa con caratteri tutti maiuscoli
 * @param str
 */
void strToUpper(char *str) {
  char *name;
  name = strtok(str, ":");

  char *s = name;
  while (*s) {
    *s = toupper((unsigned char)*s);
    s++;
  }
}




/**
 * @fn void isPositive(float, int*)
 * @brief determina se quantita è un numero positivo
 * 		  imposta flag_errore = 1 se quantita è <= 0
 * @param quantita
 * @param flag_errore
 */
void isPositive(float quantita,int* flag_errore){
  *flag_errore = 0;

  if (quantita <= 0){
    *flag_errore = 1;
    printf("\tERRORE! numero negativo\n");
  }
}


/**
 * @fn void checkFloat(float, int*)
 * @brief determina se quantita_float è un numero decimale
 *        imposta flag_errore = 1 se quantita_flaot è un numero decimale
 * @param quantita_float
 * @param flag_errore
 */
void checkFloat(float quantita_float, int *flag_errore) {
  int quantita_int;
  *flag_errore = 0;

  quantita_int = (int)quantita_float; // viene fatto il cast(int), quindi se
                                      // quantita_float=2.30, quantita_int=2

  if (quantita_float > quantita_int) {
    *flag_errore = 1;
  }
}


/**
 * @fn void isNum(char*, int*)
 * @brief determina se str è un numero valido: intero, float
 * 		  imposta flag_errore = 1 se str non è un numero
 * @param str
 * @param flag_errore
 */
void isNum(char *str, int *flag_errore) {
  // L = { 2., .2, asd, .asd, asd., as.d, .2.2 }

  // non ci devono essere lettere
  // ci deve essere solo un punto
  // il punto non puo' essere n� all inizio n� alla fine

  *flag_errore = 0;
  int i = 0;
  int dot_counter = 0;

  int len = strlen(str);


  if (str[0] == '.' || str[strlen(str) - 1] == '.') {
    *flag_errore = 1;
    printf("\tERRORE! Il punto non puo' stare ne all'inizio ne alla fine del numero\n");
  } else {
    while ((i < len) && (*flag_errore == 0)) {
      if ((((str[i] >= '0') && (str[i] <= '9')) || str[i] == '.' ||str[0] == '-') && dot_counter <= 1) {

        if (str[i] == '.') {
          dot_counter++;
          if (dot_counter > 1) {
            *flag_errore = 1;
            printf("\tERRORE !Non puoi inserire più di un punto\n");
          }
        }
      } else {
        *flag_errore = 1;
        printf("\tERRORE! non puoi inserire caratteri non numerici\n");
      }
      i++;
    }
  }
}
