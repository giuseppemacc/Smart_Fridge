/**
 * @def GESTIONE_ALIMENTI_H_
 * @brief contiene i sottoprogrammi che operano sul file alimenti e la relativa interazione con l'utente
 */
#ifndef GESTIONE_ALIMENTI_H_
#define GESTIONE_ALIMENTI_H_

#include "types.h"
#include <stdio.h>

/**
 * @fn void ordinaFileAlimenti_AZ(char*)
 * @brief ordina fil_name di alimenti in ordine alfabetico
 * @param file_name
 */
void ordinaFileAlimenti_AZ(char *file_name);


/**
 * @fn int ricerca_alimento_binaria(char*, t_alimento*, FILE*)
 * @brief ricerca un'alimento tramite il nome in file_alimenti
 * @warning usa la ricerca binaria quindi necessita che file_alimento sia ordinato!
 * @param nome
 * @param alimento
 * @param file_alimenti
 * @return 0 se non è stata trovata l'alimento
 *         1 se è stato trovato e viene memorizzato in *alimento
 */
int ricerca_alimento_binaria(char *nome, t_alimento *alimento, FILE *file_alimenti);


/**
 * @fn void ricerca_alimentoSottstr(char*, t_alimento[], int*, FILE*)
 * @brief cerca e restituisce tutte gli alimenti che contengono *nome per sottostringa nel loro nome
 * @param nome
 * @param alimenti
 * @param n_alimenti
 * @param file_alimenti
 */
void ricerca_alimentoSottstr(char *nome, t_alimento alimenti[], int* n_alimenti, FILE *file_alimenti);


/**
 * @fn t_alimento richiediAlimento(int*)
 * @brief chiede all'utente di inserire un nome di alimento e resituisce l'alimento voluta trovato nel file alimenti
 * 		  - chiede di inserire un nome di alimento
 * 		  - se è stata trovata un alimento nel file alimenti con lo stesso nome allora lo resituisce
 * 		  - altrimenti esegue la ricerca su sottostringa e mostra all'utente l' elenco di alimenti trovati
 * 		    e chiede di selezionare quello voluto e la resituisce
 * 		  - se non viene trovata nessun alimento neanche tramite la ricerca per sottostringa allora chiede all'utente di inserire un altro nome
 * @param flag_home
 * @return
 */
t_alimento richiediAlimento(int* flag_home);



/**
 * @fn void print_alimenti(char*)
 * @brief visualizza a schermo tutte gli alimenti (in ordine alfabetico se ordina_file=1) presenti in filename_alimenti
 * 		  se ordina_file = 1 ordina filename_alimenti
 * 		  stampa a schermo tutte gli alimenti del file
 * @post  dettagli alimenti presenti in filename_alimenti stampati a schermo
 * @param filename_alimenti
 */
void print_alimenti(char* filename_alimenti);

/**
 * @fn void caricaAlimenti()
 * @brief permette all'utente di aggiungere degli alimenti al file alimenti
 * 		  chiede all'utente di inserire un'alimento o più alimenti con i relativi campi e lo aggiunge in coda al file alimenti
 * 		  - non permette l'aggiunta di alimenti con lo stesso nome di altri alimenti già presenti nel file alimenti
 * 		    ad eccezione dei casi in cui abbiano la stessa unità di misura, ed in questo caso non verrà aggiunto un nuovo alimento
 * 		    ma verrà aggiornata la quantità dell'alimento già presente come la somma delle quantità dei due alimenti
 * @post file alimenti con l'aggiunta dei nuovi alimenti inseriti
 */
void caricaAlimenti();



/**
 * @fn t_alimento modificaAlimento(t_alimento, int, int*)
 * @brief permette all'utente di modificare i campi di un alimento passato come argomento
 * 		  - durante la modifica non permette all'utente di cambiare il nome con un altro di un alimento già presente in file alimenti
 * 		  - durante le molteplici richieste di input considera sempre il caso che l'utente possa inserire valori errati
 * 		    o che possa inserire la costante BACK_HOME ed in quest'ultimo caso imposta *flag_home a 1 e termina la funzione
 * @param alimento
 * @param modifica_dispensa
 * @param flag_home
 * @return alimento modificato
 */
t_alimento modificaAlimento(t_alimento alimento, int modifica_dispensa, int* flag_home);


/**
 * @fn void sovrascrivi_alimento(char*, t_alimento)
 * @brief sovrascrive nel file alimenti l'alimento con nome nome_alimento con alimento_modificato
 * 	      - cerca nel file alimenti l'alimento con nome_alimento e lo sovrascrive con alimento_modificato
 * @post  file ricette con la ricetta_modificata
 * @param nome_alimento
 * @param alimento_modificato
 */
void sovrascrivi_alimento(char* nome_alimento, t_alimento alimento_modificato);


#endif /*GESTIONE_ALIMENTI_H*/

