/**
 * @def GESTIONE_RICETTE_H_
 * @brief contiene i sottoprogrammi che operano sul file ricette e cronologia ricette, e la relativa interazione con l'utente
 */

#ifndef GESTIONE_RICETTE_H_
#define GESTIONE_RICETTE_H_

#include "types.h"
#include <stdio.h>

/**
 * @fn void ordinaFileRicette_AZ(char*)
 * @brief ordina file_name dalla A alla Z
 * 		  apre file_name
 * 		  lo ordina usando un ordinamento per selezione
 * 		  chiude il file
 * @pre file_name non ordinato
 * @post file_name ordinato
 * @param file_name
 */
void ordinaFileRicette_AZ(char *file_name);


/**
 * @fn int ricerca_ricetta_binaria(char*, t_ricetta*, FILE*)
 * @brief ricerca una ricetta tramite il nome in file_ricette
 * 		  usa la ricerca binaria quindi necessita che file_ricette sia ordinato!
 * @pre   file_ricette aperto, file_ricette ordinato
 * @post  puntatore del file posizionato per leggere/modificare la ricetta trovata
 * 		  se la ricetta non viene trovata il puntatore è posizionato alla fine del file
 * @param nome
 * @param ricetta
 * @param file_ricette
 * @return 0 se non è stata trovata la ricetta
 *         1 se è stata trovata e viene memorizzata in ricetta
 */
int ricerca_ricetta_binaria (char *nome, t_ricetta *ricetta, FILE *file_ricette);


/**
 * @fn void ricerca_ricettaSottstr(char*, t_ricetta[], int*, FILE*)
 * @brief cerca e restituisce tutte le ricette il cui nome
 *
 * @pre
 * @post
 * @param nome
 * @param ricette
 * @param n_ricette
 * @param file_ricette
 */
void ricerca_ricettaSottstr(char *nome, t_ricetta ricette[], int* n_ricette, FILE *file_ricette);

t_ricetta richiediRicetta(int* flag_home);



void print_ricette(int ordina_file, char* filename_ricette);

void caricaRicette();




t_ricetta modificaRicetta(t_ricetta ricetta, int* flag_home);

void sovrascrivi_ricetta(char* nome_ricetta, t_ricetta ricetta_modificata);




int isAlimento_compatibile(t_alimento alimento1, t_alimento alimento2, int ignora_quantita);

int isPreparabile(t_ricetta ricetta, char* filename_alimenti );

int isContained(t_alimento alimenti1[], t_alimento alimenti2[], int n_alimenti1, int n_alimenti2);

void ricettePreparabili( t_ricetta ricette_preparabili[], int* n_ricette_preparabili, char* filename_ricette);

void ricetteCompatibili( t_alimento alimenti[], int n_alimenti, t_ricetta ricette_compatibili[], int* n_ricette_compatibili, char* filename_ricette);




void ordina_arrRicette_4giorni(t_ricetta ricette[], int n_ricette);

void shift_arrRicette_4cat(t_ricetta ricette[], int n_ricette, t_categoria cat);

void prioritarizza_ricette( t_ricetta ricette[], int n_ricette );


void consigliaRicette();

void preparaRicetta(t_ricetta ricetta);




void valutaRicetta(char* nome_ricetta, int* flag_home);

void printStatistica_voti();





#endif /* GESTIONE_RICETTE_H_ */
