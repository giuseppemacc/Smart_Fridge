#include "file_names.h"
#include "types.h"
#include "utils.h"
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "inputs.h"




void ordinaFileAlimenti_AZ(char *file_name) {

  FILE *file;

  t_alimento j_alimento;
  t_alimento i_alimento;
  t_alimento min_alimento;


  int i = 0;
  int i_min;
  int j;

  if (apriFile(&file, file_name, "rb+")) {
    rewind(file);

    //-----
    fread(&i_alimento, sizeof(t_alimento), 1, file);
    min_alimento = i_alimento;
    //-----

    while (!feof(file)) {

      fread(&j_alimento, sizeof(t_alimento), 1, file);
      j = i + 1;
      min_alimento = i_alimento;
      i_min = i;

      while (!feof(file)) {

        if (strMin(j_alimento.nome, min_alimento.nome)) {
          min_alimento = j_alimento;
          i_min = j;
        }

        fread(&j_alimento, sizeof(t_alimento), 1, file);
        j++;
      }


      // file[i_min] = i_alimento
      fseek(file, i_min * sizeof(t_alimento), SEEK_SET);
      fwrite(&i_alimento, sizeof(t_alimento), 1, file);

      // file[i] = min_alimento
      fseek(file, (i) * sizeof(t_alimento), SEEK_SET);
      fwrite(&min_alimento, sizeof(t_alimento), 1, file);

      //----

      i++;
      fseek(file, i * sizeof(t_alimento), SEEK_SET);
      fread(&i_alimento, sizeof(t_alimento), 1, file);
      min_alimento = i_alimento;
      //-----
    }

    fclose(file);
  }
}



int ricerca_alimento_binaria (char *nome, t_alimento *alimento, FILE *file_alimenti){
	int flag_alimento_trovato = 0;
	int inf, sup, med;
	inf = 0;

	t_alimento alimento_corrente;

	strToUpper(nome);

	fseek(file_alimenti, 0, SEEK_END);	//posiziona il puntatore in ultima posizione

	sup = ftell(file_alimenti)/sizeof(t_alimento);	//numero di elementi nel file


	do{
		med = ( inf + sup) / 2;

		fseek(file_alimenti, (med - 1) *sizeof(t_alimento), SEEK_SET);

		fread(&alimento_corrente, sizeof(t_alimento), 1, file_alimenti);


		if (strcmp(alimento_corrente.nome, nome) == 0){
			flag_alimento_trovato = 1;
			*alimento = alimento_corrente;
			 fseek(file_alimenti, -1 * sizeof(t_alimento), SEEK_CUR); // sposta di uno indietro

		}else{
			if (strcmp(alimento_corrente.nome, nome) < 0){
				inf = med + 1;
			}else{
				sup = med - 1;
			}
		}
	}while (inf <= sup && !flag_alimento_trovato);

	return flag_alimento_trovato;
}



void ricerca_alimentoSottstr(char *nome, t_alimento alimenti[], int* n_alimenti, FILE *file_alimenti) {
  t_alimento alimento_corrente;

  *n_alimenti = 0;
  strToUpper(nome);

  rewind(file_alimenti);

  fread(&alimento_corrente, sizeof(t_alimento), 1, file_alimenti);

  while (!feof(file_alimenti) ) {
    if ( sottostrEqual(alimento_corrente.nome, nome) ) { // se hanno una sottostringa in comune
      alimenti[ *n_alimenti ] = alimento_corrente;
      (*n_alimenti)++;
    }
    fread(&alimento_corrente, sizeof(t_alimento), 1, file_alimenti);

  }
}



t_alimento richiediAlimento(int* flag_home){

	t_alimento alimento_trovato;
	t_alimento alimenti_trovati[50];
	int n_alimenti_trovati;

	int flag_continue;
	int flag_errore;

	char nome[20];
	int input;

	FILE* file_alimenti;

	*flag_home = 0;
	do{
		flag_continue = 0;

		do{
			printf("Inserisci il nome dell'alimento >> ");
			inputStr(nome, 20, &flag_errore, &(*flag_home));

		}while(flag_errore && ((*flag_home)==0));



		if(!(*flag_home)){

			ordinaFileAlimenti_AZ(FILENAME_ALIMENTI);
			if(apriFile(&file_alimenti, FILENAME_ALIMENTI, "rb+")){

				if( !ricerca_alimento_binaria(nome, &alimento_trovato, file_alimenti) ){

					ricerca_alimentoSottstr(nome, alimenti_trovati, &n_alimenti_trovati, file_alimenti);

					if( n_alimenti_trovati > 0){
						// printa gli alimenti

						puts("forse cercavi ...");

						for( int i = 0; i < n_alimenti_trovati; i++){
							printf("%d) %s\n", i+1, alimenti_trovati[i].nome );
						}
						printf("0) cerca un altro alimento\n");

						do{
							printf("seleziona opzione >> ");
							input = inputInt(&flag_errore, &(*flag_home));

							if(!(*flag_home) && !flag_errore){

								if( input == 0 ){
									flag_continue = 1;
								}else if ( input > n_alimenti_trovati ){
									flag_errore = 1;
								}else{
									alimento_trovato = alimenti_trovati[input-1];
								}
							}

						}while(flag_errore && ((*flag_home)==0));


					}else{
						printf("alimento non trovato\n");
						flag_continue = 1;
					}

				}

				fclose(file_alimenti);
			}
		}

	}while(flag_continue && ((*flag_home)==0) );

	return alimento_trovato;
}





void print_alimenti(char* filename_alimenti) {
  t_alimento alimento_corrente;
  FILE *file_alimenti;


  ordinaFileAlimenti_AZ(filename_alimenti);

  if (apriFile(&file_alimenti, filename_alimenti, "rb+")) {
    rewind(file_alimenti);
    fread(&alimento_corrente, sizeof(t_alimento), 1, file_alimenti);

    while (!feof(file_alimenti)) {
      if (strcmp(alimento_corrente.nome, "") != 0) {
        print_alimento(alimento_corrente);
      }
      fread(&alimento_corrente, sizeof(t_alimento), 1, file_alimenti);
    }

    fclose(file_alimenti);
  }
}

void caricaAlimenti() {
  int flag_home;
  int flag_continue;
  int flag_errore;
  t_alimento alimento;
  t_alimento alimento_trovato;
  FILE* file_alimenti;


  do {
    flag_home = 0;
    flag_continue = 0;
    flag_errore = 0;

    printf("inserisci alimento:\n");
    alimento = inputAlimento(0, &flag_home);

    if (!flag_home) {
    	ordinaFileAlimenti_AZ(FILENAME_ALIMENTI);
    	if( apriFile(&file_alimenti, FILENAME_ALIMENTI, "rb+") ){

    		if( ricerca_alimento_binaria(alimento.nome, &alimento_trovato, file_alimenti) ){
				if( alimento.unita == alimento_trovato.unita ){
					alimento.quantita += alimento_trovato.quantita;
				}else{
					flag_errore = 1;
					flag_continue = 1; // cioè che glielo fa rinserire
					 printf("ERRORE! %s gia'  esistente espresso in unita'  di misura differente\n",alimento.nome);
				}
			}else{
				fseek(file_alimenti, 0, SEEK_END); // posiziona alla fine
			}

		   if (!flag_errore ) {

				fwrite(&alimento, sizeof(t_alimento), 1, file_alimenti);

				do{
				  printf("  inserire altri alimenti? >> ");
				  flag_continue = inputBool(&flag_errore, &flag_home);

			  }while( (flag_errore == 1) && (flag_home == 0) );

			}

    		fclose(file_alimenti);
    	}

    }

  } while ((flag_continue == 1) && (flag_home == 0));
}



// chiede all utente di modificare l alimento
t_alimento modificaAlimento(t_alimento alimento, int modifica_dispensa, int* flag_home){
	int flag_errore;
	int input;
	FILE* file_alimenti;
	t_alimento alimento_trovato;
	t_alimento alimento_modificato = alimento;

	do{
		printf("1) elimina alimento\n2) modifica alimento\n >> ");
		input = inputInt(&flag_errore, &(*flag_home));

		if(!flag_errore && !(*flag_home)){
			if(!(input==1 || input==2 )){
				flag_errore=1;
			}
		}

	}while(flag_errore && (*flag_home==0));


	if(!(*flag_home)){

		if(input == 1){
			strcpy(alimento_modificato.nome,"");
		}else if (input == 2){

			do{
				printf("\nQuale campo vuoi modificare?\n");
				puts("\t[1] nome" );
				puts("\t[2] unita' di misura e quantita");
				if(modifica_dispensa){
					puts("\t[3] dispensa");
				}

				printf("\t >> ");

				input = inputInt(&flag_errore, &(*flag_home));

				if(!flag_errore && !(*flag_home)){
					if(!(input==1 || input==2 || input==3)){
						flag_errore=1;
					}
					if((input==3) && (modifica_dispensa==0)){
						flag_errore=1;
					}
				}
			}while(flag_errore && (*flag_home==0));

			if( !(*flag_home) ){

				if(input == 1){
					do{
						inputAlimento_nome(&alimento_modificato, &(*flag_home) );

						if(!(*flag_home)){

							ordinaFileAlimenti_AZ(FILENAME_ALIMENTI);
							if(apriFile(&file_alimenti, FILENAME_ALIMENTI, "rb+")){
								if( ricerca_alimento_binaria(alimento_modificato.nome, &alimento_trovato, file_alimenti)){ // se esiste già un alimento con il nuovo nome
									printf("impossibile modificare il nome, esiste già un alimento con lo stesso nome\n");

									flag_errore = 1;

								}else{
									flag_errore = 0;
								}

								fclose(file_alimenti);
							}
						}

					}while(flag_errore && !(*flag_home));


				}else if(input == 2){

					inputAlimento_unita(&alimento_modificato, &(*flag_home) );

					if (!(*flag_home)){
						inputAlimento_quantita(&alimento_modificato, &(*flag_home)  );
					}
				}else if(input == 3){

					inputAlimento_dispensa(&alimento_modificato, &(*flag_home));
				}
			}
		}
	}

	return alimento_modificato;
}


void sovrascrivi_alimento(char* nome_alimento, t_alimento alimento_modificato){

	FILE* file_alimenti;
	t_alimento alimento_trovato;


	ordinaFileAlimenti_AZ(FILENAME_ALIMENTI);
	if(apriFile(&file_alimenti, FILENAME_ALIMENTI, "rb+")){

		if( ricerca_alimento_binaria(nome_alimento, &alimento_trovato, file_alimenti) ){ // posiziona il puntatore sull alimento da moficare

			fwrite(&alimento_modificato, sizeof(t_alimento), 1, file_alimenti);

			if( strEqual(alimento_modificato.nome, "")){
				printf("alimento eliminato!\n");
			}else{
				printf("alimento modificato!\n");
			}

		}else{
			printf("impossibile modificare/eliminare, alimento non esistente!\n");
		}

		fclose(file_alimenti);
	}
}





